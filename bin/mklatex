#!/usr/bin/env bash

set -e   # Stop script if a command exit with non zero.

if [[ "${#}" -lt 1 || "${1}" == "-h" || "${1}" == "--help" ]]; then
    echo "Usage: $(basename $0) INPUT.tex"
    echo "Description: Compile the input LaTeX document."
    echo "Environment:"
    echo -e "\tMKLATEX_SRC_DIR: Directory containing source files (required)."
    echo -e "\tMKLATEX_BUILD_DIR: Directory containing build files (required)."
    exit 1
fi

# NOTE: Must be set after optional $1 expansion.
set -u   # Stop script if an empty variable is expanded.

function infile2outfile() {
    local filepath="${1?filepath unset}"
    local dirin="${2?dirin unset}"
    local dirout="${3?dirout unset}"

    # path substitution: src dir -> build dir
    if [[ "$(realpath "${filepath}")" =~ "$(realpath "${dirin}")" ]]; then
        filepath="$(echo "${filepath}" | sed "s/${dirin}\//${dirout}\//")"
    fi

    # extension substitution: .tex -> .pdf
    if [[ "${filepath##*.}" == "tex" ]]; then
        filepath="$(echo "${filepath}" | sed 's/\.tex$/\.pdf/')"
    fi

    # path conversion: absolute -> relative
    if [[ "${filepath:0:1}" == "/" ]]; then
        filepath="$(realpath -s --relative-to="${PWD}" "${filepath}")"
    fi

    echo "${filepath}"
}

function outfile2logfile() {
    # extension substitution: .pdf -> .log
    echo "${1?outfile unset}" | sed 's/\.pdf/\.log/'
}

# Get user input

INPUT_FILE="${1}"

# Perform file manipulation

INPUT_FILE="$(infile2outfile "${INPUT_FILE}" "${MKLATEX_SRC_DIR}" "${MKLATEX_BUILD_DIR}")"
INPUT_LOG="$(outfile2logfile "${INPUT_FILE}")"

# Call the Makefile system and print result

make -f ${MKLATEX_PATH}/cli/main.mk MKLATEX_INCLUDE_PRE=etc/make/common.mk "${INPUT_FILE}"
cat "${INPUT_LOG}"
