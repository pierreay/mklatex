#!/usr/bin/env bash
# Template UUID: 78304346-9828-4492-98e2-a7e1ffcd2cbf

# Global variables
# ==============================================================================

# TODO: Add support of exporting an inkscape file (like arg1 mode for TeX but for Inkscape)

# Working mode (see line number in `help()/Usage`).
MODE=0

# Program's options (switches).
OPT_VERBOSE=false
OPT_FORCE=false
OPT_LOG=false
OPT_SINGLE=false
OPT_COMPRESS=false
OPT_NOTES=false
OPT_HANDOUT=false

# Program's option-arguments (variables).
OPTARG_OUTFILE=""
OPTARG_VERSIONNAME=""

# Program's arguments.
ARGS=""

# Help
# ==============================================================================

# Program's help.
function help() {
    cat << EOF
Usage:
    $(basename $0) [--ignorerc] [OPTIONS]... FILE.tex
    $(basename $0) [--ignorerc] [OPTIONS]... MODULE TARGET

Compile the input LaTeX document or interact with Makefile's modules.

Options:
    -h, --help                  Show this help.
    -v, --verbose               Enable verbose mode.
    -f, --force                 Force rebuild by touching the input file.
    -l, --log                   Show build log.
    -s, --single                Only perform a single pass compilation.
    -c, --compress              Compress the PDF after compilation.
    -o, --outfile FILE          Output PDF file.
    -n, --name VERSIONNAME      Version name of the document.
    --ignorerc                  Ignore any .mklatexrc file (MUST be passed as
                                first one to be recognized).

Options for Beamer:
    --notes                     Enable Beamer notes mode.
    --handout                   Enable Beamer handout mode.

Modules:
    main                        Main module to build documents handling all dependencies.
    latex                       Build LaTeX documents.
    inkscape                    Build Inkscape figures.
    drawio                      Build DrawIO figures.
    docker                      Manage and build inside Docker.
    biblio                      Import and format local bibliography.

Environment:
    MKLATEX_PATH                Path of MKLaTeX (required).
    MKLATEX_SRC_DIR             Directory containing source files (required).
    MKLATEX_BUILD_DIR           Directory containing build files (required).

Files:
    .mklatexrc                  If found in working directory, read command-line options
                                and arguments from it (one per line).

Exit status:
  0     if OK,
  1     if minor problem (e.g., warning),
  2     if major problem (e.g., fatal error).

Full documentation <https://github.com/pierreay/mklatex.git>
EOF
}

# If nothing is provided, show help and exit.
if [[ $# -lt 1 ]]; then
    help
    exit 1
fi

# Parsing
# ==============================================================================

# If found and not requested to ignore it, concatenate content of `.mklatexrc`
# with current command-line.
if [[ "${1}" != "--ignorerc" && -f ".mklatexrc" ]]; then
    echo "Read from .mklatexrc..."
    eval set -- "$(cat ".mklatexrc" | tr '\n' ' ')" "$@"
fi
[[ "${1}" == "--ignorerc" ]] && shift

# Let `getopt` parse the options/arguments following our specification below. 
TEMP=$(getopt --options hvflsco:n:                                                              \
              --longoptions help,verbose,force,log,single,compress,outfile:,name:,notes,handout \
              -n "$(basename $0)" -- "$@")
if [ $? != 0 ] ; then exit 2 ; fi
# Set the output of `getopt` as the options/arguments of current program.
eval set -- "$TEMP"

# Iterate over all supplied options and option-arguments.
while true; do
  case "$1" in
    -h | --help )
      help
      exit 0
      ;;
    -v | --verbose  ) OPT_VERBOSE=true        ; shift   ;;
    -f | --force    ) OPT_FORCE=true          ; shift   ;;
    -l | --log      ) OPT_LOG=true            ; shift   ;;
    -s | --single   ) OPT_SINGLE=true         ; shift   ;;
    -c | --compress ) OPT_COMPRESS=true       ; shift   ;;
    --notes         ) OPT_NOTES=true          ; shift   ;;
    --handout       ) OPT_HANDOUT=true        ; shift   ;;
    -o | --outfile  ) OPTARG_OUTFILE="$2"     ; shift 2 ;;
    -n | --name     ) OPTARG_VERSIONNAME="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Get the remaining ARGS.
ARGS=("${@}")

# Stop script if an empty variable is expanded.
set -u

# Functions
# ==============================================================================

function infile2outfile() {
    local filepath="${1?filepath unset}"
    local dirin="${2?dirin unset}"
    local dirout="${3?dirout unset}"

    # Path substitution: src dir -> build dir
    if [[ "$(realpath "${filepath}")" =~ "$(realpath "${dirin}")" ]]; then
        filepath="$(echo "${filepath}" | sed "s/${dirin}\//${dirout}\//")"
    fi

    # Extension substitution: .tex -> .pdf
    if [[ "${filepath##*.}" == "tex" ]]; then
        filepath="$(echo "${filepath}" | sed 's/\.tex$/\.pdf/')"
    fi

    # Path conversion: absolute -> relative
    if [[ "${filepath:0:1}" == "/" ]]; then
        filepath="$(realpath -s --relative-to="${PWD}" "${filepath}")"
    fi

    echo "${filepath}"
}

function outfile2logfile() {
    # Extension substitution: .pdf -> .log
    echo "${1?outfile unset}" | sed 's/\.pdf/\.log/'
}

function execmake() {
    local module=${1?module undefined}
    local file=${2?file undefined}
    local args=""

    # Build Make command line based on global options and arguments.
    if [[ "${OPT_SINGLE}" = true ]]; then
        args+="LATEX_ONESHOT=true "
    fi
    if [[ "${OPT_COMPRESS}" = true ]]; then
        args+="LATEX_GS_ENABLE=true "
    fi
    if [[ "${OPT_NOTES}" = true ]]; then
        args+="MKLATEX_LATEX_BEAMER_NOTE2ND=true "
    fi
    if [[ "${OPT_HANDOUT}" = true ]]; then
        args+="MKLATEX_LATEX_BEAMER_HANDOUT=true "
    fi
    if [[ ! -z "${OPTARG_OUTFILE}" ]]; then
        args+="LATEX_OUT_FILE=${OPTARG_OUTFILE} "
    fi
    if [[ ! -z "${OPTARG_VERSIONNAME}" ]]; then
        args+="MKLATEX_LATEX_VERSION_NAME=${OPTARG_VERSIONNAME} "
    fi

    make -f "${MKLATEX_PATH}/cli/${module}" MKLATEX_INCLUDE_PRE=etc/make/common.mk ${args} "${file}"
}

# Program
# ==============================================================================

function main_arg1() {
    # Get user input.
    local infile="${ARGS[0]}"

    # Perform file manipulation to get target output file.
    local outfile="$(infile2outfile "${infile}" "${MKLATEX_SRC_DIR}" "${MKLATEX_BUILD_DIR}")"
    local log="$(outfile2logfile "${outfile}")"

    # Perform pre-build actions based on options and arguments.
    if [[ "${OPT_FORCE}" = true ]]; then
        touch ${infile}
    fi

    # Call the Makefile system.
    execmake "main.mk" "${outfile}"

    # Show log if requested (mainly for editor parsing).
    if [[ "${OPT_LOG}" = true ]]; then
        cat "${log}"
    fi
}

function main_arg2() {
    execmake "${ARGS[0]}.mk" "${ARGS[1]}"
}

function main() {
    if [[ ${#ARGS[@]} -eq 1 ]]; then
        main_arg1
    elif [[ ${#ARGS[@]} -eq 2 ]]; then
        main_arg2
    else
        echo "Fatal: Bad number of arguments: ${#ARGS[@]}"
        exit 2
    fi
}

main
